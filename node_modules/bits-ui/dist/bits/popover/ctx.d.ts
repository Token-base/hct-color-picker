/// <reference types="svelte" />
import { type CreatePopoverProps, type Popover as PopoverReturn } from "@melt-ui/svelte";
import type { Writable } from "svelte/store";
import type { FloatingProps } from "../floating/_types.js";
export declare const getAttrs: (part: "content" | "arrow" | "trigger" | "close") => Record<string, string>;
export declare function setCtx(props: CreatePopoverProps): {
    updateOption: <K extends string, V extends unknown>(key: K, value: V | undefined) => void;
    ids: {
        content: Writable<string>;
        trigger: Writable<string>;
    };
    elements: {
        trigger: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<[{
            update: (updater: import("svelte/store").Updater<boolean>, sideEffect?: ((newValue: boolean) => void) | undefined) => void;
            set: (this: void, value: boolean) => void;
            subscribe(this: void, run: import("svelte/store").Subscriber<boolean>, invalidate?: import("svelte/store").Invalidator<boolean> | undefined): import("svelte/store").Unsubscriber;
        }, Writable<string>, Writable<string>], (node: HTMLElement) => import("@melt-ui/svelte/internal/types").MeltActionReturn<"keydown" | "click">, ([$open, $contentId, $triggerId]: [boolean, string, string]) => {
            readonly role: "button";
            readonly 'aria-haspopup': "dialog";
            readonly 'aria-expanded': boolean;
            readonly 'data-state': "open" | "closed";
            readonly 'aria-controls': string;
            readonly id: string;
        }, string>;
        content: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<[import("svelte/store").Readable<boolean>, Writable<string | HTMLElement | null | undefined>, Writable<string>], <Node_1 extends unknown>(node: HTMLElement) => {
            destroy(): void;
        }, ([$isVisible, $portal, $contentId]: [boolean, string | HTMLElement | null | undefined, string]) => {
            hidden: boolean | undefined;
            tabindex: number;
            style: string;
            id: string;
            'data-state': string;
            'data-portal': string | undefined;
        }, string>;
        arrow: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<Writable<number>, import("svelte/action").Action<any, any, Record<never, any>>, ($arrowSize: number) => {
            'data-arrow': boolean;
            style: string;
        }, string>;
        close: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<import("svelte/store").Stores | undefined, (node: HTMLElement) => import("@melt-ui/svelte/internal/types").MeltActionReturn<"keydown" | "click">, () => {
            readonly type: "button";
        }, string>;
    };
    states: {
        open: {
            update: (updater: import("svelte/store").Updater<boolean>, sideEffect?: ((newValue: boolean) => void) | undefined) => void;
            set: (this: void, value: boolean) => void;
            subscribe(this: void, run: import("svelte/store").Subscriber<boolean>, invalidate?: import("svelte/store").Invalidator<boolean> | undefined): import("svelte/store").Unsubscriber;
        };
    };
    options: {
        forceVisible: Writable<boolean>;
        defaultOpen: Writable<boolean>;
        onOpenChange: Writable<import("@melt-ui/svelte/internal/helpers").ChangeFn<boolean> | undefined>;
        preventScroll: Writable<boolean>;
        portal: Writable<string | HTMLElement | null | undefined>;
        positioning: Writable<import("@melt-ui/svelte/internal/actions").FloatingConfig | {
            placement: "bottom";
        }>;
        arrowSize: Writable<number>;
        closeOnOutsideClick: Writable<boolean>;
        closeOnEscape: Writable<boolean>;
        closeFocus: Writable<import("@melt-ui/svelte").FocusProp | undefined>;
        disableFocusTrap: Writable<boolean>;
        openFocus: Writable<import("@melt-ui/svelte").FocusProp | undefined>;
    };
};
export declare function getCtx(): PopoverReturn;
export declare function setArrow(size?: number): PopoverReturn;
export declare function updatePositioning(props: FloatingProps): void;
