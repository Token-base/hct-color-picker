/// <reference types="svelte" />
import { type CreateDateFieldProps } from "@melt-ui/svelte";
export declare const getAttrs: (part: "segment" | "label" | "input") => Record<string, string>;
export declare function setCtx(props: CreateDateFieldProps): {
    updateOption: <K extends string, V extends unknown>(key: K, value: V | undefined) => void;
    elements: {
        field: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<[{
            update: (updater: import("svelte/store").Updater<import("@internationalized/date").DateValue | undefined>, sideEffect?: ((newValue: import("@internationalized/date").DateValue | undefined) => void) | undefined) => void;
            set: (this: void, value: import("@internationalized/date").DateValue | undefined) => void;
            subscribe(this: void, run: import("svelte/store").Subscriber<import("@internationalized/date").DateValue | undefined>, invalidate?: import("svelte/store").Invalidator<import("@internationalized/date").DateValue | undefined> | undefined): import("svelte/store").Unsubscriber;
        }, import("svelte/store").Readable<boolean>, import("svelte/store").Writable<boolean>, import("svelte/store").Writable<boolean>, import("svelte/store").Readable<{
            field: string;
            label: string;
            description: string;
            validation: string;
        }>], <Node_1 extends unknown>() => {
            destroy(): void;
        }, ([$value, $isInvalid, $disabled, $readonly, $ids]: [import("@internationalized/date").DateValue | undefined, boolean, boolean, boolean, {
            field: string;
            label: string;
            description: string;
            validation: string;
        }]) => {
            role: string;
            id: string;
            'aria-labelledby': string;
            'aria-describedby': string;
            'aria-disabled': string | undefined;
            'aria-readonly': string | undefined;
            'data-invalid': string | undefined;
            'data-disabled': string | undefined;
        }, string>;
        segment: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<[import("svelte/store").Writable<import("@melt-ui/svelte/dist/builders/date-field/_internal/types").DateSegmentObj | import("@melt-ui/svelte/dist/builders/date-field/_internal/types").DateAndTimeSegmentObj>, import("svelte/store").Writable<12 | 24 | undefined>, {
            set: (this: void, value: import("@internationalized/date").DateValue) => void;
            update: (this: void, updater: import("svelte/store").Updater<import("@internationalized/date").DateValue>) => void;
            subscribe: (this: void, run: import("svelte/store").Subscriber<import("@internationalized/date").DateValue>, invalidate?: import("svelte/store").Invalidator<import("@internationalized/date").DateValue> | undefined) => import("svelte/store").Unsubscriber;
            add: (duration: import("@internationalized/date").DateTimeDuration | import("@internationalized/date").DateDuration) => void;
            subtract: (duration: import("@internationalized/date").DateTimeDuration | import("@internationalized/date").DateDuration) => void;
            setDate: (fields: import("@internationalized/date").DateFields | (import("@internationalized/date").DateFields & import("@internationalized/date").TimeFields), disambiguation?: import("@internationalized/date").Disambiguation | undefined) => void;
            reset: () => void;
            toWritable: () => {
                set: (this: void, value: import("@internationalized/date").DateValue) => void;
                subscribe: (this: void, run: import("svelte/store").Subscriber<import("@internationalized/date").DateValue>, invalidate?: import("svelte/store").Invalidator<import("@internationalized/date").DateValue> | undefined) => import("svelte/store").Unsubscriber;
                update: (this: void, updater: import("svelte/store").Updater<import("@internationalized/date").DateValue>) => void;
            };
            nextPage: (amount: number) => void;
            prevPage: (amount: number) => void;
        }, {
            update: (updater: import("svelte/store").Updater<import("@internationalized/date").DateValue | undefined>, sideEffect?: ((newValue: import("@internationalized/date").DateValue | undefined) => void) | undefined) => void;
            set: (this: void, value: import("@internationalized/date").DateValue | undefined) => void;
            subscribe(this: void, run: import("svelte/store").Subscriber<import("@internationalized/date").DateValue | undefined>, invalidate?: import("svelte/store").Invalidator<import("@internationalized/date").DateValue | undefined> | undefined): import("svelte/store").Unsubscriber;
        }, import("svelte/store").Readable<boolean>, import("svelte/store").Writable<boolean>, import("svelte/store").Writable<boolean>, import("svelte/store").Readable<{
            field: string;
            label: string;
            description: string;
            validation: string;
            day: string;
            month: string;
            year: string;
            hour: string;
            minute: string;
            second: string;
            dayPeriod: string;
            timeZoneName: string;
        }>, import("svelte/store").Writable<string>], (node: HTMLElement) => import("@melt-ui/svelte/internal/types").MeltActionReturn<"keydown" | "click" | "focusout">, ([$segmentValues, $hourCycle, $placeholder, $value, $isInvalid, $disabled, $readonly, $idValues, _,]: [import("@melt-ui/svelte/dist/builders/date-field/_internal/types").DateSegmentObj | import("@melt-ui/svelte/dist/builders/date-field/_internal/types").DateAndTimeSegmentObj, 12 | 24 | undefined, import("@internationalized/date").DateValue, import("@internationalized/date").DateValue | undefined, boolean, boolean, boolean, {
            field: string;
            label: string;
            description: string;
            validation: string;
            day: string;
            month: string;
            year: string;
            hour: string;
            minute: string;
            second: string;
            dayPeriod: string;
            timeZoneName: string;
        }, string]) => (part: import("@melt-ui/svelte").SegmentPart) => {
            'aria-invalid': string | undefined;
            'aria-disabled': string | undefined;
            'aria-readonly': string | undefined;
            'data-invalid': string | undefined;
            'data-disabled': string | undefined;
            'data-segment': string;
        } | {
            id: string;
            'aria-labelledby': string;
            contentEditable: boolean;
            'aria-describedby': string | undefined;
            tabindex: number | undefined;
            'aria-invalid': string | undefined;
            'aria-disabled': string | undefined;
            'aria-readonly': string | undefined;
            'data-invalid': string | undefined;
            'data-disabled': string | undefined;
            'data-segment': string;
        }, string>;
        label: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<[import("svelte/store").Readable<boolean>, import("svelte/store").Writable<boolean>, import("svelte/store").Writable<string>], (node: HTMLElement) => {
            destroy: () => void;
        }, ([$isInvalid, $disabled, $labelId]: [boolean, boolean, string]) => {
            id: string;
            'data-invalid': string | undefined;
            'data-disabled': string | undefined;
        }, string>;
        hiddenInput: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<[{
            update: (updater: import("svelte/store").Updater<import("@internationalized/date").DateValue | undefined>, sideEffect?: ((newValue: import("@internationalized/date").DateValue | undefined) => void) | undefined) => void;
            set: (this: void, value: import("@internationalized/date").DateValue | undefined) => void;
            subscribe(this: void, run: import("svelte/store").Subscriber<import("@internationalized/date").DateValue | undefined>, invalidate?: import("svelte/store").Invalidator<import("@internationalized/date").DateValue | undefined> | undefined): import("svelte/store").Unsubscriber;
        }, import("svelte/store").Writable<string | undefined>, import("svelte/store").Writable<boolean>, import("svelte/store").Writable<boolean>], import("svelte/action").Action<any, any, Record<never, any>>, ([$value, $nameStore, $disabled, $required]: [import("@internationalized/date").DateValue | undefined, string | undefined, boolean, boolean]) => {
            name: string | undefined;
            value: string | undefined;
            'aria-hidden': string;
            hidden: boolean;
            disabled: boolean;
            required: boolean;
            tabIndex: number;
            style: string;
        }, string>;
        validation: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<[import("svelte/store").Readable<boolean>, import("svelte/store").Writable<string>], import("svelte/action").Action<any, any, Record<never, any>>, ([$isInvalid, $validationId]: [boolean, string]) => {
            id: string;
            'data-invalid': string | undefined;
            style: string | undefined;
        }, string>;
    };
    states: {
        value: {
            update: (updater: import("svelte/store").Updater<import("@internationalized/date").DateValue | undefined>, sideEffect?: ((newValue: import("@internationalized/date").DateValue | undefined) => void) | undefined) => void;
            set: (this: void, value: import("@internationalized/date").DateValue | undefined) => void;
            subscribe(this: void, run: import("svelte/store").Subscriber<import("@internationalized/date").DateValue | undefined>, invalidate?: import("svelte/store").Invalidator<import("@internationalized/date").DateValue | undefined> | undefined): import("svelte/store").Unsubscriber;
        };
        segmentValues: import("svelte/store").Writable<import("@melt-ui/svelte/dist/builders/date-field/_internal/types").DateSegmentObj | import("@melt-ui/svelte/dist/builders/date-field/_internal/types").DateAndTimeSegmentObj>;
        segmentContents: import("svelte/store").Readable<{
            part: import("@melt-ui/svelte").SegmentPart;
            value: string;
        }[]>;
        segmentContentsObj: import("svelte/store").Readable<import("@melt-ui/svelte/dist/builders/date-field/_internal/types").SegmentContentObj>;
        placeholder: {
            set: (this: void, value: import("@internationalized/date").DateValue) => void;
            subscribe: (this: void, run: import("svelte/store").Subscriber<import("@internationalized/date").DateValue>, invalidate?: import("svelte/store").Invalidator<import("@internationalized/date").DateValue> | undefined) => import("svelte/store").Unsubscriber;
            update: (this: void, updater: import("svelte/store").Updater<import("@internationalized/date").DateValue>) => void;
        };
        isInvalid: import("svelte/store").Readable<boolean>;
    };
    helpers: {
        isDateUnavailable: import("svelte/store").Readable<(date: import("@internationalized/date").DateValue) => boolean | undefined>;
    };
    options: {
        disabled: import("svelte/store").Writable<boolean>;
        name: import("svelte/store").Writable<string | undefined>;
        onValueChange?: import("svelte/store").Writable<import("@melt-ui/svelte/internal/helpers").ChangeFn<import("@internationalized/date").DateValue | undefined> | undefined> | undefined;
        defaultValue?: import("svelte/store").Writable<import("@internationalized/date").DateValue | undefined> | undefined;
        required: import("svelte/store").Writable<boolean>;
        minValue: import("svelte/store").Writable<import("@internationalized/date").DateValue | undefined>;
        maxValue: import("svelte/store").Writable<import("@internationalized/date").DateValue | undefined>;
        defaultPlaceholder?: import("svelte/store").Writable<import("@internationalized/date").DateValue | undefined> | undefined;
        onPlaceholderChange?: import("svelte/store").Writable<import("@melt-ui/svelte/internal/helpers").ChangeFn<import("@internationalized/date").DateValue> | undefined> | undefined;
        isDateUnavailable: import("svelte/store").Writable<import("@melt-ui/svelte").Matcher | undefined>;
        locale: import("svelte/store").Writable<string>;
        readonly: import("svelte/store").Writable<boolean>;
        granularity: import("svelte/store").Writable<import("@melt-ui/svelte").Granularity | undefined>;
        hourCycle: import("svelte/store").Writable<12 | 24 | undefined>;
        hideTimeZone: import("svelte/store").Writable<boolean>;
    };
    ids: {
        label: import("svelte/store").Writable<string>;
        description: import("svelte/store").Writable<string>;
        month: import("svelte/store").Writable<string>;
        year: import("svelte/store").Writable<string>;
        day: import("svelte/store").Writable<string>;
        hour: import("svelte/store").Writable<string>;
        minute: import("svelte/store").Writable<string>;
        second: import("svelte/store").Writable<string>;
        dayPeriod: import("svelte/store").Writable<string>;
        timeZoneName: import("svelte/store").Writable<string>;
        field: import("svelte/store").Writable<string>;
        validation: import("svelte/store").Writable<string>;
    };
};
export declare function getCtx(): {
    elements: {
        field: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<[{
            update: (updater: import("svelte/store").Updater<import("@internationalized/date").DateValue | undefined>, sideEffect?: ((newValue: import("@internationalized/date").DateValue | undefined) => void) | undefined) => void;
            set: (this: void, value: import("@internationalized/date").DateValue | undefined) => void;
            subscribe(this: void, run: import("svelte/store").Subscriber<import("@internationalized/date").DateValue | undefined>, invalidate?: import("svelte/store").Invalidator<import("@internationalized/date").DateValue | undefined> | undefined): import("svelte/store").Unsubscriber;
        }, import("svelte/store").Readable<boolean>, import("svelte/store").Writable<boolean>, import("svelte/store").Writable<boolean>, import("svelte/store").Readable<{
            field: string;
            label: string;
            description: string;
            validation: string;
        }>], <Node_1 extends unknown>() => {
            destroy(): void;
        }, ([$value, $isInvalid, $disabled, $readonly, $ids]: [import("@internationalized/date").DateValue | undefined, boolean, boolean, boolean, {
            field: string;
            label: string;
            description: string;
            validation: string;
        }]) => {
            role: string;
            id: string;
            'aria-labelledby': string;
            'aria-describedby': string;
            'aria-disabled': string | undefined;
            'aria-readonly': string | undefined;
            'data-invalid': string | undefined;
            'data-disabled': string | undefined;
        }, string>;
        segment: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<[import("svelte/store").Writable<import("@melt-ui/svelte/dist/builders/date-field/_internal/types").DateSegmentObj | import("@melt-ui/svelte/dist/builders/date-field/_internal/types").DateAndTimeSegmentObj>, import("svelte/store").Writable<12 | 24 | undefined>, {
            set: (this: void, value: import("@internationalized/date").DateValue) => void;
            update: (this: void, updater: import("svelte/store").Updater<import("@internationalized/date").DateValue>) => void;
            subscribe: (this: void, run: import("svelte/store").Subscriber<import("@internationalized/date").DateValue>, invalidate?: import("svelte/store").Invalidator<import("@internationalized/date").DateValue> | undefined) => import("svelte/store").Unsubscriber;
            add: (duration: import("@internationalized/date").DateTimeDuration | import("@internationalized/date").DateDuration) => void;
            subtract: (duration: import("@internationalized/date").DateTimeDuration | import("@internationalized/date").DateDuration) => void;
            setDate: (fields: import("@internationalized/date").DateFields | (import("@internationalized/date").DateFields & import("@internationalized/date").TimeFields), disambiguation?: import("@internationalized/date").Disambiguation | undefined) => void;
            reset: () => void;
            toWritable: () => {
                set: (this: void, value: import("@internationalized/date").DateValue) => void;
                subscribe: (this: void, run: import("svelte/store").Subscriber<import("@internationalized/date").DateValue>, invalidate?: import("svelte/store").Invalidator<import("@internationalized/date").DateValue> | undefined) => import("svelte/store").Unsubscriber;
                update: (this: void, updater: import("svelte/store").Updater<import("@internationalized/date").DateValue>) => void;
            };
            nextPage: (amount: number) => void;
            prevPage: (amount: number) => void;
        }, {
            update: (updater: import("svelte/store").Updater<import("@internationalized/date").DateValue | undefined>, sideEffect?: ((newValue: import("@internationalized/date").DateValue | undefined) => void) | undefined) => void;
            set: (this: void, value: import("@internationalized/date").DateValue | undefined) => void;
            subscribe(this: void, run: import("svelte/store").Subscriber<import("@internationalized/date").DateValue | undefined>, invalidate?: import("svelte/store").Invalidator<import("@internationalized/date").DateValue | undefined> | undefined): import("svelte/store").Unsubscriber;
        }, import("svelte/store").Readable<boolean>, import("svelte/store").Writable<boolean>, import("svelte/store").Writable<boolean>, import("svelte/store").Readable<{
            field: string;
            label: string;
            description: string;
            validation: string;
            day: string;
            month: string;
            year: string;
            hour: string;
            minute: string;
            second: string;
            dayPeriod: string;
            timeZoneName: string;
        }>, import("svelte/store").Writable<string>], (node: HTMLElement) => import("@melt-ui/svelte/internal/types").MeltActionReturn<"keydown" | "click" | "focusout">, ([$segmentValues, $hourCycle, $placeholder, $value, $isInvalid, $disabled, $readonly, $idValues, _,]: [import("@melt-ui/svelte/dist/builders/date-field/_internal/types").DateSegmentObj | import("@melt-ui/svelte/dist/builders/date-field/_internal/types").DateAndTimeSegmentObj, 12 | 24 | undefined, import("@internationalized/date").DateValue, import("@internationalized/date").DateValue | undefined, boolean, boolean, boolean, {
            field: string;
            label: string;
            description: string;
            validation: string;
            day: string;
            month: string;
            year: string;
            hour: string;
            minute: string;
            second: string;
            dayPeriod: string;
            timeZoneName: string;
        }, string]) => (part: import("@melt-ui/svelte").SegmentPart) => {
            'aria-invalid': string | undefined;
            'aria-disabled': string | undefined;
            'aria-readonly': string | undefined;
            'data-invalid': string | undefined;
            'data-disabled': string | undefined;
            'data-segment': string;
        } | {
            id: string;
            'aria-labelledby': string;
            contentEditable: boolean;
            'aria-describedby': string | undefined;
            tabindex: number | undefined;
            'aria-invalid': string | undefined;
            'aria-disabled': string | undefined;
            'aria-readonly': string | undefined;
            'data-invalid': string | undefined;
            'data-disabled': string | undefined;
            'data-segment': string;
        }, string>;
        label: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<[import("svelte/store").Readable<boolean>, import("svelte/store").Writable<boolean>, import("svelte/store").Writable<string>], (node: HTMLElement) => {
            destroy: () => void;
        }, ([$isInvalid, $disabled, $labelId]: [boolean, boolean, string]) => {
            id: string;
            'data-invalid': string | undefined;
            'data-disabled': string | undefined;
        }, string>;
        hiddenInput: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<[{
            update: (updater: import("svelte/store").Updater<import("@internationalized/date").DateValue | undefined>, sideEffect?: ((newValue: import("@internationalized/date").DateValue | undefined) => void) | undefined) => void;
            set: (this: void, value: import("@internationalized/date").DateValue | undefined) => void;
            subscribe(this: void, run: import("svelte/store").Subscriber<import("@internationalized/date").DateValue | undefined>, invalidate?: import("svelte/store").Invalidator<import("@internationalized/date").DateValue | undefined> | undefined): import("svelte/store").Unsubscriber;
        }, import("svelte/store").Writable<string | undefined>, import("svelte/store").Writable<boolean>, import("svelte/store").Writable<boolean>], import("svelte/action").Action<any, any, Record<never, any>>, ([$value, $nameStore, $disabled, $required]: [import("@internationalized/date").DateValue | undefined, string | undefined, boolean, boolean]) => {
            name: string | undefined;
            value: string | undefined;
            'aria-hidden': string;
            hidden: boolean;
            disabled: boolean;
            required: boolean;
            tabIndex: number;
            style: string;
        }, string>;
        validation: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<[import("svelte/store").Readable<boolean>, import("svelte/store").Writable<string>], import("svelte/action").Action<any, any, Record<never, any>>, ([$isInvalid, $validationId]: [boolean, string]) => {
            id: string;
            'data-invalid': string | undefined;
            style: string | undefined;
        }, string>;
    };
    states: {
        value: {
            update: (updater: import("svelte/store").Updater<import("@internationalized/date").DateValue | undefined>, sideEffect?: ((newValue: import("@internationalized/date").DateValue | undefined) => void) | undefined) => void;
            set: (this: void, value: import("@internationalized/date").DateValue | undefined) => void;
            subscribe(this: void, run: import("svelte/store").Subscriber<import("@internationalized/date").DateValue | undefined>, invalidate?: import("svelte/store").Invalidator<import("@internationalized/date").DateValue | undefined> | undefined): import("svelte/store").Unsubscriber;
        };
        segmentValues: import("svelte/store").Writable<import("@melt-ui/svelte/dist/builders/date-field/_internal/types").DateSegmentObj | import("@melt-ui/svelte/dist/builders/date-field/_internal/types").DateAndTimeSegmentObj>;
        segmentContents: import("svelte/store").Readable<{
            part: import("@melt-ui/svelte").SegmentPart;
            value: string;
        }[]>;
        segmentContentsObj: import("svelte/store").Readable<import("@melt-ui/svelte/dist/builders/date-field/_internal/types").SegmentContentObj>;
        placeholder: {
            set: (this: void, value: import("@internationalized/date").DateValue) => void;
            subscribe: (this: void, run: import("svelte/store").Subscriber<import("@internationalized/date").DateValue>, invalidate?: import("svelte/store").Invalidator<import("@internationalized/date").DateValue> | undefined) => import("svelte/store").Unsubscriber;
            update: (this: void, updater: import("svelte/store").Updater<import("@internationalized/date").DateValue>) => void;
        };
        isInvalid: import("svelte/store").Readable<boolean>;
    };
    helpers: {
        isDateUnavailable: import("svelte/store").Readable<(date: import("@internationalized/date").DateValue) => boolean | undefined>;
    };
    options: {
        disabled: import("svelte/store").Writable<boolean>;
        name: import("svelte/store").Writable<string | undefined>;
        onValueChange?: import("svelte/store").Writable<import("@melt-ui/svelte/internal/helpers").ChangeFn<import("@internationalized/date").DateValue | undefined> | undefined> | undefined;
        defaultValue?: import("svelte/store").Writable<import("@internationalized/date").DateValue | undefined> | undefined;
        required: import("svelte/store").Writable<boolean>;
        minValue: import("svelte/store").Writable<import("@internationalized/date").DateValue | undefined>;
        maxValue: import("svelte/store").Writable<import("@internationalized/date").DateValue | undefined>;
        defaultPlaceholder?: import("svelte/store").Writable<import("@internationalized/date").DateValue | undefined> | undefined;
        onPlaceholderChange?: import("svelte/store").Writable<import("@melt-ui/svelte/internal/helpers").ChangeFn<import("@internationalized/date").DateValue> | undefined> | undefined;
        isDateUnavailable: import("svelte/store").Writable<import("@melt-ui/svelte").Matcher | undefined>;
        locale: import("svelte/store").Writable<string>;
        readonly: import("svelte/store").Writable<boolean>;
        granularity: import("svelte/store").Writable<import("@melt-ui/svelte").Granularity | undefined>;
        hourCycle: import("svelte/store").Writable<12 | 24 | undefined>;
        hideTimeZone: import("svelte/store").Writable<boolean>;
    };
    ids: {
        label: import("svelte/store").Writable<string>;
        description: import("svelte/store").Writable<string>;
        month: import("svelte/store").Writable<string>;
        year: import("svelte/store").Writable<string>;
        day: import("svelte/store").Writable<string>;
        hour: import("svelte/store").Writable<string>;
        minute: import("svelte/store").Writable<string>;
        second: import("svelte/store").Writable<string>;
        dayPeriod: import("svelte/store").Writable<string>;
        timeZoneName: import("svelte/store").Writable<string>;
        field: import("svelte/store").Writable<string>;
        validation: import("svelte/store").Writable<string>;
    };
};
