import { SvelteComponent } from "svelte";
declare class __sveltets_Render<T extends unknown, Multiple extends boolean> {
    props(): Omit<{
        multiple?: (false & Multiple) | undefined;
        disabled?: boolean | undefined;
        preventScroll?: boolean | undefined;
        closeOnEscape?: boolean | undefined;
        closeOnOutsideClick?: boolean | undefined;
        portal?: string | HTMLElement | null | undefined;
        required?: boolean | undefined;
        name?: string | undefined;
        loop?: boolean | undefined;
        typeahead?: boolean | undefined;
        scrollAlignment?: "center" | "nearest" | undefined;
        highlightOnHover?: boolean | undefined;
        selected?: (import("@melt-ui/svelte/internal/types").WhenTrue<Multiple, import("@melt-ui/svelte/index.js").ComboboxOption<T>[], import("@melt-ui/svelte/index.js").ComboboxOption<T>, import("@melt-ui/svelte/index.js").ComboboxOption<T>[] | import("@melt-ui/svelte/index.js").ComboboxOption<T>> & {}) | undefined;
        onSelectedChange?: import("../../../internal/types.js").OnChangeFn<import("@melt-ui/svelte/internal/types").WhenTrue<Multiple, import("@melt-ui/svelte/index.js").ComboboxOption<T>[], import("@melt-ui/svelte/index.js").ComboboxOption<T>, import("@melt-ui/svelte/index.js").ComboboxOption<T>[] | import("@melt-ui/svelte/index.js").ComboboxOption<T>> | undefined> | undefined;
        open?: boolean | undefined;
        onOpenChange?: import("../../../internal/types.js").OnChangeFn<boolean> | undefined;
    }, "multiple"> & {
        items?: {
            value: T;
            label?: string | undefined;
        }[] | undefined;
        multiple?: Multiple | undefined;
    };
    events(): {} & {
        [evt: string]: CustomEvent<any>;
    };
    slots(): {
        default: {
            ids: {
                menu: string;
                trigger: string;
                label: string;
            };
        };
    };
}
export type SelectProps<T extends unknown, Multiple extends boolean> = ReturnType<__sveltets_Render<T, Multiple>['props']>;
export type SelectEvents<T extends unknown, Multiple extends boolean> = ReturnType<__sveltets_Render<T, Multiple>['events']>;
export type SelectSlots<T extends unknown, Multiple extends boolean> = ReturnType<__sveltets_Render<T, Multiple>['slots']>;
export default class Select<T extends unknown, Multiple extends boolean> extends SvelteComponent<SelectProps<T, Multiple>, SelectEvents<T, Multiple>, SelectSlots<T, Multiple>> {
}
export {};
